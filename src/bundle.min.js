/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _calcEventHandler = __webpack_require__(1);

var _calcModel = __webpack_require__(2);

var _creditAppComponent = __webpack_require__(3);

var _locales = __webpack_require__(4);

var last_known_scroll_position = 0,
    monthlyPowertChart = void 0,
    grandFinanceChart = void 0,
    angleToAzimuth = [],
    grandChartUpdated = {},
    gridFirstYearDom = {},
    gridSummaryDom = {},
    gridYearlyDom = {},
    grandSummaryDom = {},
    initialDataDom = {},
    profitabilityYear = 0;
var creditApp = {},
    complectationPricingApp = {},
    incomeGridApp = {},
    calculatorApp = {},
    localeApp = {};
var vueMainInstances = [];

var getAllData = function getAllData(c) {
  return c(window._allData);
};

var getLocales = function getLocales(c) {
  return c(window._locales);
};

var localeMixin = (0, _locales.createLocaleMixin)({
  getLocales: getLocales
});

var fetchDataForChart = function fetchDataForChart(data) {
  var labels = data.map(function (set) {
    return set.name;
  });
  var series = [];
  series[0] = data.map(function (set) {
    return set.value;
  });
  return {
    labels: labels,
    series: series
  };
};

/**
 * calculate chart data
 *
 * @param {Object} data month data from data.monthlyPowerGeneraion
 * @param {Number} summary yearly power generation from vue.summary
 */
var updateChartData = function updateChartData(data, type) {
  //calculate chart data
  var series = [];
  var labels = [];
  series[0] = data.map(function (set) {
    return Math.round(set.value);
  });
  var size = getGraphSize(type);
  var options = {};
  switch (type) {
    case "MonthlyChart":
      if (!monthlyPowertChart) return;
      labels = data.map(function (set) {
        return calculatorApp.getMonthText(set.id, true);
      });

      options = {
        seriesBarDistance: 5,
        width: size.width,
        height: size.height,
        showZLabels: true
      };
      monthlyPowertChart.update({
        labels: labels,
        series: series
      }, options);
      break;
    case "GrandFinance":
      if (!grandFinanceChart) return;
      labels = data.map(function (set) {
        return set.name;
      });

      options = {
        seriesBarDistance: 5,
        width: size.width,
        height: size.height,
        showZLabels: false
      };
      grandFinanceChart.update({
        labels: labels,
        series: series
      }, options);
      grandChartUpdated["GrandFinance"] = new Date().getTime();
      break;
  }
};

var generatePowerChart = function generatePowerChart(data) {
  var chartData = fetchDataForChart(data);
  var size = getGraphSize("MonthlyChart");

  var options = {
    seriesBarDistance: 5,
    width: size.width,
    height: size.height,
    showZLabels: true
  };

  var responsiveOptions = [['screen and (max-width: 640px)', {
    seriesBarDistance: 5,
    axisX: {
      labelInterpolationFnc: function labelInterpolationFnc(value) {
        return value[0];
      }
    }
  }]];
  if (!grandChartUpdated["MonthlyChart"]) grandChartUpdated["MonthlyChart"] = new Date().getTime();
  monthlyPowertChart = new Chartist.Bar('.ct-chart', chartData, options, responsiveOptions);
  monthlyPowertChart.eventEmitter.addEventHandler('created', function (data) {});
};

var generateFinanceChart = function generateFinanceChart(data) {
  var chartData = fetchDataForChart(data);
  var size = getGraphSize("GrandFinance");

  var options = {
    seriesBarDistance: 5,
    width: size.width,
    height: size.height,
    showZLabels: false,
    chartType: "GrandFinance"
  };

  var responsiveOptions = [['screen and (max-width: 640px)', {
    seriesBarDistance: 5,
    axisX: {
      labelInterpolationFnc: function labelInterpolationFnc(value) {
        return value[0];
      }
    }
  }]];
  if (!grandChartUpdated["GrandFinance"]) grandChartUpdated["MonthlyChart"] = new Date().getTime();
  grandFinanceChart = new Chartist.Bar('.ct-chart.grand', chartData, options, responsiveOptions);
  grandFinanceChart.eventEmitter.addEventHandler('created', function (data) {});
};

var getGraphSize = function getGraphSize(type) {
  var result = {
    width: $(window).width(),
    height: 0
  };
  switch (type) {
    case "MonthlyChart":
      result.height = 240;
      if (result.width > 500) {
        result.width = 500;
      }
      break;
    case "GrandFinance":
      result.height = 400;
      if (result.width > 1024) {
        result.width = 1024;
      }
      break;
  }
  return result;
};

var generateAnglePicker = function generateAnglePicker(data) {
  $("#anglepicker").anglepicker({
    min: data.min,
    max: data.max,
    snap: data.step,
    value: data.selectedAngle,
    clockwise: false,
    change: function change(e, ui) {
      if (data.selectedAngle != ui.value) data.selectedAngle = ui.value;
    }
  });
};

var generateCompass = function generateCompass(data) {
  var compass = document.getElementById('jog_dial_house');
  var jog = document.getElementById('jog_dial_one');
  var dialOne = JogDial(jog, {
    touchMode: "wheel",
    wheelSize: '100%',
    knobSize: '50px',
    minDegree: data.min,
    maxDegree: data.max,
    degreeStartAt: data.current,
    degreeStep: data.step
  });
  dialOne.on('mousemove', function (evt) {
    var angle = void 0,
        delta = evt.target.degree;

    if (dialOne.info.now.rotation > 360) {
      dialOne.info.now.rotation = 0;
    } else if (dialOne.info.now.rotation < 0) {
      dialOne.info.now.rotation = 360;
    }

    compass.style.transform = 'rotate(' + evt.target.degree + 'deg)';
    data.current = evt.target.degree - data.offset;
  });
  dialOne.on("start", function (event) {
    compass.style.transform = 'rotate(' + data.current + 'deg)';
    data.current = data.current - data.offset;
  });
};

var generateMonthToRegionRelation = function generateMonthToRegionRelation(monthlyPower, regions, data) {
  data.forEach(function (rel, key) {
    var region = void 0,
        month = monthlyPower.filter(function (m) {
      return m.id == key + 1;
    });
    if (month && month.length > 0) {
      month = month[0];
      Object.keys(rel).forEach(function (id) {
        region = regions.filter(function (m) {
          return m.id + "" == id;
        });
        if (region && region.length > 0) {
          region = region[0];
          region.mod.push({
            "mId": month.id,
            "value": rel[id]
          });
        }
      });
    }
  });
};

var generateUkraineMap = function generateUkraineMap(data) {
  var arr = document.getElementsByClassName("land");
  var title = document.getElementById("country_title");
  var yOffset = 20;

  var clearAllActive = function clearAllActive(arr) {
    for (var i = 0; i < arr.length; i++) {
      arr[i].setAttribute('class', 'land');
    }
  };

  for (var el = 0; el < arr.length; el++) {
    arr[el].onclick = function () {
      clearAllActive(arr);
      this.setAttribute('class', 'land active');
      //
      var id = this.getAttribute('id');
      var region = data.regions.filter(function (f) {
        return f.id == id;
      });
      if (region && region.length > 0) {
        data.selectedRegion = region[0];
      }
    };
  }
};

var generateFinanceResultModel = function generateFinanceResultModel(data) {
  for (var i = 1; i < data.yearsToShow + 1; i++) {
    data.totalFinanceResult.push({
      index: i,
      name: i + "Ð¹",
      value: i - 10
    });
  }
};

$(document).ready(function () {
  creditApp = (0, _creditAppComponent.createCreditApp)({
    getAllData: getAllData,
    getComplectationPrice: function getComplectationPrice() {
      return complectationPricingApp.getComplectationPrice();
    },
    getComplectationPriceLocal: function getComplectationPriceLocal() {
      return complectationPricingApp.getComplectationPriceLocal();
    },
    increasePrice: function increasePrice(data) {
      return complectationPricingApp.increasePrice(data);
    },
    increaseInPrice: function increaseInPrice() {
      return complectationPricingApp.increaseInPrice;
    }
  }, _calcEventHandler.eventHandler, [localeMixin]);

  vueMainInstances.push(creditApp);

  complectationPricingApp = new Vue({
    el: '#complectation-pricing-app',
    data: {
      avgPowerCableLength: 0,
      increaseInPrice: 0,
      selectedPricing: {
        ratio: {}
      },
      isDetailsActive: false,
      preferedPower: _calcModel.calcModel.preferedPower,
      complectationPricing: [],
      eModules: [],
      selectedEModule: {},
      eFastening: [],
      selectedEFastening: {},
      webInverters: [],
      selectedwWebInverter: {},
      isComplectationPricingVisible: _calcModel.calcModel.isComplectationPricingVisible
    },
    mixins: [localeMixin],
    computed: {
      getCableLength: { // power slider model
        get: function get() {
          return Math.round(this.getModuleCount() * this.avgPowerCableLength);
        }
      }
    },
    methods: {
      getMonitoring: function getMonitoring() {
        if (!this.selectedPricing.id) return "";
        var filter = this.getComplectationPricingText(this.selectedPricing.id, true).filter(function (f) {
          return f.label == "ÐÐ¾Ð½Ð¸ÑÐ¾ÑÐ¸Ð½Ð³:";
        });
        if (filter.length > 0) return "Ð²ÐºÐ»ÑÑÐµÐ½Ð¾";
        return "Ð½Ðµ Ð²ÐºÐ»ÑÑÐµÐ½Ð¾";
      },
      getComplectationPrice: function getComplectationPrice(data) {
        if (!data) data = this.selectedPricing;
        var delta = 0;
        var normalPrice = this.preferedPower.current * data.ratio.value * 1000;
        if (this.increaseInPrice > 0) {
          delta = normalPrice * this.increaseInPrice / 100;
        }
        return Math.round(normalPrice + delta);
      },
      getComplectationPriceLocal: function getComplectationPriceLocal(data) {
        if (!data) data = this.selectedPricing;
        return Math.round(this.preferedPower.current * data.ratio.value * 1000);
      },
      getModuleCount: function getModuleCount() {
        return Math.round(1000 * this.preferedPower.current / this.getModuleDescr().power);
      },
      getModuleDescr: function getModuleDescr() {
        var _this = this;

        var filter = this.eModules.filter(function (m) {
          return m.complectionId == _this.selectedPricing.id;
        });
        return filter[0] || {};
      },
      getFasteningDescr: function getFasteningDescr() {
        var _this2 = this;

        var filter = this.eFastening.filter(function (f) {
          return f.complectionId == _this2.selectedPricing.id;
        });
        return filter[0] || {};
      },
      getInverterDescr: function getInverterDescr() {
        var _this3 = this;

        if (this.webInverters.length <= 0) return {};
        var filter = this.webInverters.filter(function (w) {
          return w.power >= _this3.preferedPower.current && w.complectionId == _this3.selectedPricing.id;
        });
        if (!filter || filter.length <= 0) var filter = this.webInverters.filter(function (w) {
          return w.complectionId == _this3.selectedPricing.id;
        });else return filter[filter.length - 1];
        return filter[0] || {};
      },
      onDetailsClick: function onDetailsClick(data, show) {
        if (data.id != this.selectedPricing.id && show) {
          this.onSelect(data);
        }
        this.isDetailsActive = show;
      },
      onSelect: function onSelect(data) {
        this.clearSelections();
        data.isSelected = true;
        this.selectedPricing = data;
        this.selectedEModule = this.getModuleDescr();
        this.selectedEFastening = this.getFasteningDescr();
        this.selectedwWebInverter = this.getInverterDescr();
      },
      setPreferedPower: function setPreferedPower(data) {
        this.preferedPower = data;
      },
      clearSelections: function clearSelections() {
        this.complectationPricing.forEach(function (el) {
          el.isSelected = false;
        });
      },
      isVisible: function isVisible() {
        return this.isComplectationPricingVisible;
      },
      appear: function appear(show) {
        if (this.isComplectationPricingVisible != show) this.isComplectationPricingVisible = show;
      },
      increasePrice: function increasePrice(value) {
        this.increaseInPrice = value;
      }
    },
    mounted: function mounted() {
      var _this4 = this;

      getAllData(function (allData) {
        _this4.avgPowerCableLength = allData.avgPowerCableLength;
        _this4.complectationPricing = allData.complectationPricing;
        _this4.eModules = allData.eModules;
        _this4.eFastening = allData.eFastening;
        _this4.webInverters = allData.webInverters;
        _this4.onSelect(_this4.complectationPricing[1]);
      });
    }
  });
  vueMainInstances.push(complectationPricingApp);

  incomeGridApp = new Vue({
    el: '#income-grids-app',
    data: {
      yearsToShow: 0,
      dollarValue: 0,
      euroToDollarRatio: 0,
      solarPanelDegradation: 0,
      taxRate: 0,
      preferedPower: {},
      yearSummary: 0,
      monthlyPowerGeneraion: [],
      totalFinanceResult: [],
      powerLocale: "",
      seasonConsumption: _calcModel.calcModel.seasonConsumption,
      currentTariff: {},
      greenTariff: {},
      futureTariff: {},
      powerLocaleSeasonsMonthly: "",
      isIncomeGridFirstYearVisible: _calcModel.calcModel.isIncomeGridFirstYearVisible,
      isIncomeGridYearlyVisible: _calcModel.calcModel.isIncomeGridYearlyVisible,
      isIncomeGridFinanceGraphVisible: _calcModel.calcModel.isIncomeGridFinanceGraphVisible,
      isInitialInfoVisible: _calcModel.calcModel.isInitialInfoVisible,
      isSummaryInfoVisible: _calcModel.calcModel.isSummaryInfoVisible,
      selectedCreditPlan: {
        initialFee: {},
        creditTerm: {}
      }
    },
    mixins: [localeMixin],
    computed: {
      profitability: function profitability() {
        if (!this.canUpdate()) return;
        return Math.round((this.getTotalIncomeY(this.yearsToShow) - this.creditInvestment - this.futureInvestment) / (this.creditInvestment + this.futureInvestment) * 100);
        //return Math.round10((this.getTotalIncomeY(this.yearsToShow) / this.investment) * 100 / this.yearsToShow,-1);
      },
      avgMonthlyIncome: function avgMonthlyIncome() {
        var _this5 = this;

        if (!this.canUpdate()) return;
        var year = new Date().getFullYear();
        var filter = this.totalFinanceResult.filter(function (r) {
          return year + r.index == _this5.greenTariff.end;
        });

        if (filter.length > 0) {
          var saleSum = 0;
          var savingSum = 0;
          for (var index = 1; index <= filter[0].index; index++) {
            saleSum += this.getSaleIncomeY(index);
            savingSum += this.getSelfSavingY(index);
          }
          var income = saleSum + savingSum;
          return Math.round(income / (filter[0].index * 12));
        }
      },
      recoupment: function recoupment() {
        if (!this.canUpdate()) return;
        return Math.round10(profitabilityYear + this.getTotalIncomeY(profitabilityYear) / (this.getTotalIncomeY(profitabilityYear) - this.getTotalIncomeY(profitabilityYear + 1)), -1);
      },
      investment: function investment() {
        if (!this.canUpdate()) return;
        var res = complectationPricingApp.getComplectationPrice();
        if (this.totalFinanceResult[0]) this.totalFinanceResult[0].value = -res;
        return Math.round10(res, -2);
      },
      futureInvestment: function futureInvestment() {
        if (!this.canUpdate() || !this.selectedCreditPlan.id) return 0;
        return Math.round10(this.getFutureInvestmentRecursively(25, 0), -2);
      },
      creditInvestment: function creditInvestment() {
        if (this.selectedCreditPlan.id) {
          return Math.round10(this.selectedCreditPlan.selectedInitialFeeDollars + this.selectedCreditPlan.selectedCommission, -2);
        } else {
          return this.investment;
        }
      },
      getFirstYearData: function getFirstYearData() {
        return this.monthlyPowerGeneraion;
      }
    },
    methods: {
      getCurrentYear: function getCurrentYear() {
        var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

        return new Date().getFullYear() + index;
      },
      getFutureInvestmentRecursively: function getFutureInvestmentRecursively(year, summary) {
        if (year == 0) return summary;
        var credit = this.getCreditPaymentY(year);
        if (credit == 0) return this.getFutureInvestmentRecursively(--year, summary);

        summary += credit - this.getSaleIncomeY(year) - this.getSelfSavingY(year);
        return this.getFutureInvestmentRecursively(--year, summary > 0 ? summary : 0);
      },
      getTotalIncomeY: function getTotalIncomeY(index) {
        var _this6 = this;

        if (!this.canUpdate()) return;
        if (index) {
          var result = Math.round10(this.getTotalIncomeRecursively(index, -this.creditInvestment), -2);
          if (result < 0) profitabilityYear++;
          if (this.totalFinanceResult[index]) {
            var prev = this.totalFinanceResult[index].value;
            this.totalFinanceResult[index].value = result;
            if (index == this.yearsToShow && prev != result) {
              this.totalFinanceResult[0].value = -this.creditInvestment;
              updateChartData(this.totalFinanceResult, "GrandFinance");
            }
          }
          return Math.round10(result, -2);
        }
        return Math.round10(this.monthlyPowerGeneraion.sum(function (month) {
          return _this6.getSaleIncomeM(month) + _this6.getSelfSavingM(month) - _this6.getCreditPaymentM(month);
        }), -2);
      },
      getTotalIncomeRecursively: function getTotalIncomeRecursively(year, summary) {
        var thisYear = new Date().getFullYear();
        if (year < 1) return summary;
        var delta = this.getSaleIncomeY(year) + this.getSelfSavingY(year) - this.getCreditPaymentY(year);
        return this.getTotalIncomeRecursively(--year, summary + delta);
      },
      getTotalIncomeM: function getTotalIncomeM(month) {
        if (!this.canUpdate()) return;
        return Math.round10(this.getSaleIncomeM(month) + this.getSelfSavingM(month) - this.getCreditPaymentM(month), -2);
      },
      getCreditPaymentY: function getCreditPaymentY(index) {
        var _this7 = this;

        if (!this.canUpdate()) return;
        if (!this.selectedCreditPlan.id) return 0;
        if (index) {
          var months = index * 12;
          if (this.selectedCreditPlan.creditTerm.current - months <= -12) return 0;
          if (this.selectedCreditPlan.creditTerm.current > months) {
            return Math.round10(this.selectedCreditPlan.selectedMonthlyPayment * 12, -2);
          } else {
            var delta = 12 - (months - this.selectedCreditPlan.creditTerm.current);
            return Math.round10(this.selectedCreditPlan.selectedMonthlyPayment * delta, -2);
          }
        } else {
          return Math.round10(this.monthlyPowerGeneraion.sum(function (month) {
            return _this7.getCreditPaymentM(month);
          }), -2);
        }
      },
      getCreditPaymentM: function getCreditPaymentM(month) {
        if (!this.canUpdate()) return;
        if (!this.selectedCreditPlan.id || !month) return 0;
        if (this.selectedCreditPlan.creditTerm) return Math.round10(this.selectedCreditPlan.creditTerm.current - month.id >= 0 ? this.selectedCreditPlan.selectedMonthlyPayment : 0, -2);
      },
      getSelfSavingY: function getSelfSavingY(index) {
        var _this8 = this;

        if (!this.canUpdate()) return;
        if (index) {
          return Math.round10(this.getSelfSavingY() / this.getCurrentTariffY() * this.getCurrentTariffY(index), -2);
        }
        return Math.round10(this.monthlyPowerGeneraion.sum(function (month) {
          var sale = _this8.getWebSaleM(month);
          return sale > 0 ? _this8.getSeasonConsumptionM(month) * _this8.getCurrentTariffM() : month.value * _this8.getCurrentTariffM();
        }), -2);
      },
      getSelfSavingM: function getSelfSavingM(month) {
        if (!this.canUpdate()) return;
        var sale = this.getWebSaleM(month);
        return Math.round10(sale > 0 ? this.getSeasonConsumptionM(month) * this.getCurrentTariffM() : month.value * this.getCurrentTariffM(), -2);
      },
      getSaleIncomeY: function getSaleIncomeY(index) {
        var _this9 = this;

        if (!this.canUpdate()) return;
        if (index) {
          return Math.round10(this.getRawIncomeY(index) - this.getTaxRateY(index), -2);
        }
        return Math.round10(this.monthlyPowerGeneraion.sum(function (month) {
          var inc = _this9.getRawIncomeM(month);
          return inc - _this9.getTaxRateM(month);
        }), -2);
      },
      getSaleIncomeM: function getSaleIncomeM(month) {
        if (!this.canUpdate()) return;
        var inc = this.getRawIncomeM(month);
        return Math.round10(inc - this.getTaxRateM(month), -2);
      },
      getTaxRateY: function getTaxRateY(index) {
        var _this10 = this;

        if (!this.canUpdate()) return;
        if (index) {
          return Math.round10(this.getRawIncomeY(index) / 100 * this.taxRate, -2);
        }
        return Math.round10(this.monthlyPowerGeneraion.sum(function (month) {
          var inc = _this10.getRawIncomeM(month);
          return inc / 100 * _this10.taxRate;
        }), -2);
      },
      getTaxRateM: function getTaxRateM(month) {
        if (!this.canUpdate()) return;
        var inc = this.getRawIncomeM(month);
        return Math.round10(inc / 100 * this.taxRate, -2);
      },
      getRawIncomeY: function getRawIncomeY(index) {
        var _this11 = this;

        if (!this.canUpdate()) return;
        if (index) {
          return Math.round10(this.getWebSaleY(index) * this.getGreenTariffY(index), -2);
        }
        return Math.round10(this.monthlyPowerGeneraion.sum(function (month) {
          return _this11.getWebSaleM(month) * _this11.getGreenTariffM();
        }), -2);
      },
      getRawIncomeM: function getRawIncomeM(month) {
        if (!this.canUpdate()) return;
        return Math.round10(this.getWebSaleM(month) * this.getGreenTariffM(), -2);
      },
      getCurrentTariffY: function getCurrentTariffY(index) {
        if (!this.canUpdate()) return;
        if (index) {
          return Math.round10(this.getCurrentTariffYRecursively(index, this.currentTariff.value / this.dollarValue), -5);
        }
        return Math.round10(this.currentTariff.value / this.dollarValue, -5);
      },
      getCurrentTariffYRecursively: function getCurrentTariffYRecursively(year, summary) {
        var thisYear = new Date().getFullYear();
        if (year <= 1) return summary;
        if (thisYear + year > this.futureTariff.end + 1) return this.getCurrentTariffYRecursively(--year, summary);
        var initial = this.currentTariff.value / this.dollarValue;
        var delta = (this.futureTariff.value - initial) / (this.futureTariff.end - thisYear);
        return this.getCurrentTariffYRecursively(--year, summary + delta);
      },
      getCurrentTariffM: function getCurrentTariffM() {
        if (!this.canUpdate()) return;
        return Math.round10(this.currentTariff.value / this.dollarValue, -5);
      },
      getGreenTariffY: function getGreenTariffY(index) {
        if (!this.canUpdate()) return;
        var currentYear = new Date().getFullYear();
        return currentYear + index <= this.greenTariff.end ? this.getGreenTariffM() : this.getCurrentTariffY(index);
      },
      getGreenTariffM: function getGreenTariffM() {
        if (!this.canUpdate()) return;
        return Math.round10(this.greenTariff.value * this.euroToDollarRatio, -5);
      },
      getWebSaleY: function getWebSaleY(index) {
        var _this12 = this;

        if (!this.canUpdate()) return;
        if (index) {
          var res = this.getWebSaleRecursively(index, this.getWebSaleY());
          return res > 0 ? res : 0;
        }
        var fin = this.monthlyPowerGeneraion.sum(function (month) {
          var res = month.value - _this12.getSeasonConsumptionM(month);
          return res > 0 ? res : 0;
        });
        return Math.round10(fin, -2);
      },
      getWebSaleRecursively: function getWebSaleRecursively(year, summary) {
        if (year <= 1) return summary;
        var delta = this.getYearSummary(year - 1) - this.getYearSummary(year);
        return this.getWebSaleRecursively(--year, summary - delta);
      },
      getWebSaleM: function getWebSaleM(month) {
        if (!this.canUpdate()) return;
        var res = month.value - this.getSeasonConsumptionM(month);
        return res > 0 ? res : 0;
      },
      getSeasonConsumptionY: function getSeasonConsumptionY() {
        if (!this.canUpdate()) return;
        return Math.round(this.seasonConsumption.summer.current * 6 + this.seasonConsumption.winter.current * 6);
      },
      getSeasonConsumptionM: function getSeasonConsumptionM(month) {
        if (!this.canUpdate()) return;
        switch (month.id) {
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
            return this.seasonConsumption.summer.current;
          case 1:
          case 2:
          case 3:
          case 10:
          case 11:
          case 12:
            return this.seasonConsumption.winter.current;
        }
      },
      setDependency: function setDependency(data) {
        this.yearSummary = data.yearSummary, this.monthlyPowerGeneraion = data.monthlyPowerGeneraion, this.preferedPower = data.preferedPower;
      },
      getYearSummary: function getYearSummary(year) {
        if (!this.canUpdate()) return;
        return Math.round(this.getYearSummaryRecursively(year, this.yearSummary));
      },
      getYearSummaryRecursively: function getYearSummaryRecursively(year, summary) {
        if (year <= 1) return summary;
        var delta = summary / 100 * this.solarPanelDegradation;
        return this.getYearSummaryRecursively(--year, summary - delta);
      },
      setYearSummary: function setYearSummary(sum) {
        this.yearSummary = sum;
      },
      appearGraph: function appearGraph(show) {
        if (this.isIncomeGridFinanceGraphVisible != show) {
          if (show) {
            //this.$forceUpdate();
          }
          this.isIncomeGridFinanceGraphVisible = show;
        }
      },
      isVisibleYearly: function isVisibleYearly() {
        return this.isIncomeGridYearlyVisible;
      },
      appearYearly: function appearYearly(show) {
        if (this.isIncomeGridYearlyVisible != show) {
          if (show) {
            //this.$forceUpdate();
          }
          this.isIncomeGridYearlyVisible = show;
        }
      },
      isVisibleFirstYear: function isVisibleFirstYear() {
        return this.isIncomeGridFirstYearVisible;
      },
      appearFirstYear: function appearFirstYear(show) {
        if (this.isIncomeGridFirstYearVisible != show) {
          if (show) {
            this.$forceUpdate();
          }
          this.isIncomeGridFirstYearVisible = show;
        }
      },
      appearInitial: function appearInitial(show) {
        if (this.isInitialInfoVisible != show) {
          if (show) {
            this.$forceUpdate();
          }
          this.isInitialInfoVisible = show;
        }
      },
      appearSummary: function appearSummary(show) {
        if (this.isSummaryInfoVisible != show) {
          if (show) {
            this.$forceUpdate();
          }
          this.isSummaryInfoVisible = show;
        }
      },
      canUpdate: function canUpdate() {
        return this.isIncomeGridYearlyVisible || this.isIncomeGridFirstYearVisible || this.isIncomeGridFinanceGraphVisible || this.isInitialInfoVisible || this.isSummaryInfoVisible;
      },
      applySelectedCreditPlan: function applySelectedCreditPlan(plan) {
        this.selectedCreditPlan = plan;
      },
      showYearlyTable: function showYearlyTable() {
        return $(window).width() > 1024;
      }
    },
    beforeUpdate: function beforeUpdate() {
      profitabilityYear = 0;
    },
    mounted: function mounted() {
      var _this13 = this;

      getAllData(function (data) {
        _this13.yearsToShow = data.yearsToShow, _this13.dollarValue = data.dollarValue, _this13.euroToDollarRatio = data.euroToDollarRatio, _this13.solarPanelDegradation = data.solarPanelDegradation, _this13.taxRate = data.taxRate, _this13.yearSummary = data.yearSummary, _this13.monthlyPowerGeneraion = data.monthlyPowerGeneraion, _this13.powerLocale = data.powerLocale, _this13.currentTariff = data.currentTariff, _this13.greenTariff = data.greenTariff, _this13.futureTariff = data.futureTariff, _this13.powerLocaleSeasonsMonthly = data.powerLocaleSeasonsMonthly;
        _this13.preferedPower = data.preferedPower;
        _this13.totalFinanceResult = data.totalFinanceResult;
        _this13.seasonConsumption = data.seasonConsumption;
        generateFinanceResultModel(_this13);
        generateFinanceChart(_this13.totalFinanceResult);
      });
      _calcEventHandler.eventHandler.on("applySelectedCreditPlan", this.applySelectedCreditPlan);
    }
  });
  vueMainInstances.push(incomeGridApp);

  calculatorApp = new Vue({
    el: '#solar-calculator-app',
    data: _calcModel.calcModel,
    mixins: [localeMixin],
    computed: {
      summary: function summary() {
        if (this.monthlyPowerGeneraion && this.monthlyPowerGeneraion.length > 0 && this.preferedPower.current > 0) {
          this.calculateMonthlyPower();
          this.yearSummary = Math.round10(this.monthlyPowerGeneraion.reduce(function (a, b) {
            if (Number.isInteger(a.value) && Number.isInteger(b.value)) return a.value + b.value;else if (!Number.isInteger(a.value) && Number.isInteger(b.value)) return a + b.value;else if (Number.isInteger(a.value) && !Number.isInteger(b.value)) return a.value + b;else return a + b;
          }), -2);
          updateChartData(this.monthlyPowerGeneraion, "MonthlyChart");
        }
        incomeGridApp.setYearSummary(this.yearSummary);
        return this.yearSummary;
      },

      powerSlide: { // power slider model
        get: function get() {
          return this.preferedPower.current;
        },
        set: function set(val) {
          if (val < this.preferedPower.current) this.preferedPower.current -= this.preferedPower.step;else this.preferedPower.current += this.preferedPower.step;
        }
      },
      selectedRegionLabel: { // power slider model
        get: function get() {
          return (this.selectedRegion.name || "").toUpperCase();
        }
      }
    },
    methods: {
      calculateMonthlyPower: function calculateMonthlyPower() {
        var _this14 = this;

        this.monthlyPowerGeneraion.forEach(function (m) {
          var mod = _this14.selectedRegion.mod.filter(function (f) {
            return f.mId == m.id;
          });
          if (mod && mod.length > 0) {
            mod = mod[0];
            m.value = Math.round(mod.value * m.days * _this14.getAngleMod() * _this14.preferedPower.current * _this14.degradationMod);
          }
        });
      },
      selectRegion: function selectRegion(region) {
        this.selectedRegion = region;
      },
      getAngleMod: function getAngleMod() {
        var _this15 = this;

        var mod = angleToAzimuth.filter(function (a) {
          return a.navA == Math.abs(_this15.navigation.current) && a.roofA == _this15.roofAngle.selectedAngle;
        });
        if (mod && mod.length > 0) {
          return mod[0].mod;
        }
        return 1;
      },
      isVisible: function isVisible() {
        return this.isCalcVisible;
      },
      appear: function appear(show) {
        if (this.isCalcVisible != show) this.isCalcVisible = show;
      },
      validateInput: function validateInput(value) {
        var _this16 = this;

        this.preferedPower.current = parseInt(this.preferedPower.current, 10);
        if (value.keyCode == 8) return;
        getAllData(function (data) {
          if (Number.isNaN(_this16.preferedPower.current)) _this16.preferedPower.current = _this16.preferedPower.default;else if (_this16.preferedPower.current > _this16.preferedPower.max) _this16.preferedPower.current = _this16.preferedPower.max;
        });
      }
    },
    mounted: function mounted() {
      var _this17 = this;

      getAllData(function (allData) {
        generateMonthToRegionRelation(allData.monthlyPowerGeneraion, allData.regions, allData.monthToRegions);
        _this17.powerLocale = allData.powerLocale;
        _this17.degradationMod = allData.degradationMod;
        _this17.powerLocaleSeasonsMonthly = allData.powerLocaleSeasonsMonthly;
        _this17.preferedPower = allData.preferedPower;
        _this17.roofAngle = allData.roofAngle;
        _this17.navigation = allData.navigation;
        _this17.monthlyPowerGeneraion = allData.monthlyPowerGeneraion;
        _this17.regions = allData.regions;
        angleToAzimuth = allData.angleToAzimuth;
        _this17.selectedRegion = allData.regions[8];
        generateUkraineMap(_this17);
        generateCompass(_this17.navigation);
        generatePowerChart(_this17.monthlyPowerGeneraion);
        generateAnglePicker(_this17.roofAngle);
        incomeGridApp.setDependency(_this17);
        complectationPricingApp.setPreferedPower(_this17.preferedPower);
      });

      /*fetch("http://localhost:5000/api/product/types").then(r => r.json()).then((data) => {
        this.types = data;
      });*/
    }
  });
  vueMainInstances.push(calculatorApp);

  localeApp = new Vue({
    el: '#locale-switch',
    data: {
      langs: [],
      selectedLang: ""
    },
    computed: {
      selectedLangComp: {
        get: function get() {
          return this.selectedLang;
        },
        set: function set(val) {
          this.selectedLang = val;
          vueMainInstances.forEach(function (v) {
            if (v.selectedLangComp) v.selectedLangComp = val;
          });
        }
      }
    },
    mounted: function mounted() {
      var _this18 = this;

      getLocales(function (locales) {
        _this18.langs = Object.keys(locales);
      });
      this.selectedLangComp = window._defaultLocale;
    }
  });

  gridFirstYearDom = $("#income-grid-first-year");
  gridYearlyDom = $("#income-grid-yearly");
  grandSummaryDom = $("#income-grid-finance-graph");
  initialDataDom = $("#income-grid-initial-data");
  gridSummaryDom = $("#income-grid-summary");

  gridFirstYearDom.appear();
  gridYearlyDom.appear();
  grandSummaryDom.appear();
  initialDataDom.appear();
  gridSummaryDom.appear();

  gridFirstYearDom.on('appear', function (event, $all_appeared_elements) {
    incomeGridApp.appearFirstYear(true);
  });
  gridFirstYearDom.on('disappear', function (event, $all_appeared_elements) {
    incomeGridApp.appearFirstYear(false);
  });

  gridYearlyDom.on('appear', function (event, $all_appeared_elements) {
    incomeGridApp.appearYearly(true);
  });
  gridYearlyDom.on('disappear', function (event, $all_appeared_elements) {
    incomeGridApp.appearYearly(false);
  });

  grandSummaryDom.on('appear', function (event, $all_appeared_elements) {
    incomeGridApp.appearGraph(true);
  });
  grandSummaryDom.on('disappear', function (event, $all_appeared_elements) {
    incomeGridApp.appearGraph(false);
  });

  initialDataDom.on('appear', function (event, $all_appeared_elements) {
    incomeGridApp.appearInitial(true);
  });
  initialDataDom.on('disappear', function (event, $all_appeared_elements) {
    incomeGridApp.appearInitial(false);
  });

  gridSummaryDom.on('appear', function (event, $all_appeared_elements) {
    incomeGridApp.appearSummary(true);
  });
  gridSummaryDom.on('disappear', function (event, $all_appeared_elements) {
    incomeGridApp.appearSummary(false);
  });

  incomeGridApp.appearFirstYear(gridFirstYearDom.is(':appeared'));

  incomeGridApp.appearYearly(gridYearlyDom.is(':appeared'));

  incomeGridApp.appearGraph(grandSummaryDom.is(':appeared'));

  incomeGridApp.appearInitial(initialDataDom.is(':appeared'));

  incomeGridApp.appearSummary(gridSummaryDom.is(':appeared'));

  $.force_appear();

  var last_scroll_pos = 0,
      lat_time_scrolled = 0,
      scroll_updated = false;
  var time_const = 1000,
      scroll_const = 200;

  window.addEventListener('scroll', function (e) {
    if (Math.abs(last_scroll_pos - window.scrollY) > scroll_const && isChrome()) {
      scroll_updated = true;

      //if(new Date().getTime() - lat_time_scrolled > time_const){
      incomeGridApp.appearFirstYear(gridFirstYearDom.is(':appeared'));

      incomeGridApp.appearYearly(gridYearlyDom.is(':appeared'));

      incomeGridApp.appearGraph(grandSummaryDom.is(':appeared'));

      incomeGridApp.appearInitial(initialDataDom.is(':appeared'));

      incomeGridApp.appearSummary(gridSummaryDom.is(':appeared'));
      //}

      last_scroll_pos = window.scrollY;
      lat_time_scrolled = new Date().getTime();
    }
  });

  window.addEventListener('orientationchange', function (e) {
    setTimeout(function () {
      updateChartData(calculatorApp.monthlyPowerGeneraion, "MonthlyChart");

      updateChartData(incomeGridApp.totalFinanceResult, "GrandFinance");
    }, 500);
  });
});

var isChrome = function isChrome() {
  var isChromium = window.chrome,
      winNav = window.navigator,
      vendorName = winNav.vendor,
      isOpera = winNav.userAgent.indexOf("OPR") > -1,
      isIEedge = winNav.userAgent.indexOf("Edge") > -1,
      isIOsChrome = winNav.userAgent.match("CriOS");

  if (isIOsChrome) {
    return true;
  } else if (isChromium !== null && typeof isChromium !== "undefined" && vendorName == "Google Inc." && isOpera === false && isIEedge === false) {
    return true;
  } else {
    return false;
  }
};

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports.eventHandler = function (options) {
    var self = this;
    var events = {};

    var emit = function emit(e, data) {
        if (events[e] && Array.isArray(events[e])) {
            for (var i = 0; i < events[e].length; i++) {
                if (events[e][i] && typeof events[e][i] === "function") {
                    events[e][i](data);
                }
            }
        }
        data = null;
    };

    var on = function on(e, c) {
        events[e] = events[e] || [];
        events[e].push(c);
    };

    var off = function off(e, c) {
        if (events[e]) {
            var i = events[e].indexOf(c);
            if (i >= 0) events[e].splice(index, 1);
        }
    };

    return {
        emit: emit,
        on: on,
        off: off
    };
}();

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports.calcModel = {
  //solarCalc start
  powerLocale: "",
  powerLocaleSeasonsMonthly: "",
  angleLocale: "",
  yearsToShow: 0,
  dollarValue: 0,
  degradationMod: 0,
  euroToDollarRatio: 0,
  solarPanelDegradation: 0,
  taxRate: 0,
  preferedPower: {},
  roofAngle: {},
  navigation: {},
  regions: {},
  monthlyPowerGeneraion: [],
  selectedRegion: {},
  yearSummary: 0,
  seasonConsumption: {
    "summer": {},
    "winter": {}
  },
  greenTariff: {},
  currentTariff: {},
  futureTariff: {},
  isCalcVisible: true,
  isComplectationPricingVisible: true,
  isIncomeGridFirstYearVisible: true,
  isIncomeGridYearlyVisible: true,
  isIncomeGridFinanceGraphVisible: true,
  isSummaryInfoVisible: true,
  isInitialInfoVisible: true
};

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports.createCreditApp = function (dataProvider, eventHandler, mixins) {
    return new Vue({
        el: '#credit-app',
        data: {
            isPopupActive: false,
            dollarValue: 0,
            creditOneTimeCommission: 0,
            initialFee: {},
            creditTerm: {},
            avaliableBanks: [],
            bankSchemas: [],
            selectedBank: {},
            selectedPlan: {},
            selectedSchema: {
                main: {},
                second: {}
            },
            cachedSchemePeriods: {}
        },
        mixins: mixins,
        computed: {
            selectedPlanComp: {
                get: function get() {
                    return this.selectedPlan;
                },
                set: function set(plan) {
                    this.selectedPlan = plan;
                    this.creditTerm = this.selectedPlan.creditTerm;
                    this.initialFee = this.selectedPlan.initialFee;
                }
            },
            commission: function commission() {
                var price = dataProvider.getComplectationPrice();
                return Math.round10(price * this.creditOneTimeCommission / 100, -1);
            },

            selectedBankComp: {
                get: function get() {
                    return this.selectedBank;
                },
                set: function set(bank) {
                    this.selectedBank = bank;
                    this.selectedSchema = this.setBankSchema(bank.id);
                }
            },
            isApplyDisabled: function isApplyDisabled() {
                return this.getYearlyPercent() <= 0;
            }
        },
        methods: {
            creditSummary: function creditSummary(currency) {
                var usd = Math.round10(this.getMonthlyPayment("USD") * this.creditTerm.current + this.getInitialFee("USD") + this.getCommission("USD"), -1);
                this.selectedPlan.selectedCreditSummary = usd;
                switch (currency) {
                    case "UAH":
                        return Math.round10(usd * this.dollarValue, -1);
                    case "USD":
                    default:
                        return usd;
                }
            },
            getMonthlyPayment: function getMonthlyPayment(currency) {
                if (this.creditTerm.current == 0 || this.initialFee.current < this.initialFee.min || this.initialFee.current > this.initialFee.max) return 0;
                var i = this.getYearlyPercent() / 12 / 100;
                var n = this.creditTerm.current;

                var k = i * Math.pow(1 + i, n) / (Math.pow(1 + i, n) - 1);
                var usa = Math.round10(k * this.getCreditedMoney(), -1);
                this.selectedPlan.selectedMonthlyPayment = usa;
                switch (currency) {
                    case "UAH":
                        return Math.round10(usa * this.dollarValue, -1);
                    case "USD":
                    default:
                        return usa;
                }
            },
            getCreditedMoney: function getCreditedMoney() {
                this.selectedPlan.selectedCreditedMoney = this.getNormalPrice("USD") - this.getInitialFee("USD");
                return this.selectedPlan.selectedCreditedMoney;
            },
            getNormalPrice: function getNormalPrice(currency) {
                var usa = dataProvider.getComplectationPrice();
                var delta = 0;
                if (this.selectedPlan.increaseInTotalValue > 0 && dataProvider.increaseInPrice == 0) {
                    delta = usa * this.selectedPlan.increaseInTotalValue / 100;
                    usa += delta;
                } else if (this.selectedPlan.increaseInTotalValue == 0 && dataProvider.increaseInPrice > 0) {
                    usa = dataProvider.getComplectationPriceLocal();
                }
                switch (currency) {
                    case "UAH":
                        return Math.round10(usa * this.dollarValue, -1);
                    case "USD":
                    default:
                        return usa;
                }
            },
            getCommission: function getCommission(currency) {
                if (this.creditTerm.current == 0 || this.initialFee.current < this.initialFee.min || this.initialFee.current > this.initialFee.max) return 0;
                var price = this.getNormalPrice("USD");
                var usa = Math.round10((price - this.getInitialFee("USD")) * this.creditOneTimeCommission / 100, -1);
                this.selectedPlan.selectedCommission = usa;
                switch (currency) {
                    case "UAH":
                        return Math.round10(usa * this.dollarValue, -1);
                    case "USD":
                    default:
                        return usa;
                }
            },
            getInitialFee: function getInitialFee(currency) {
                if (this.creditTerm.current == 0 || this.initialFee.current < this.initialFee.min || this.initialFee.current > this.initialFee.max) return 0;
                var price = this.getNormalPrice("USD");
                var usa = Math.round10(price * this.initialFee.current / 100, -1);
                this.selectedPlan.selectedInitialFeeDollars = usa;
                switch (currency) {
                    case "UAH":
                        return Math.round10(usa * this.dollarValue, -1);
                    case "USD":
                    default:
                        return usa;
                }
            },
            getYearlyPercent: function getYearlyPercent() {
                var _this = this;

                if (!this.selectedPlan.id) return 0;
                var month = this.creditTerm.current;
                var filerPeriod = this.selectedPlan.periods.filter(function (s) {
                    return month <= s.to && month >= s.from;
                });
                var filterFirstPayment = this.selectedPlan.firstPayments.filter(function (s) {
                    return _this.initialFee.current >= s.from && _this.initialFee.current <= s.to;
                });
                if (filerPeriod.length > 0 && filterFirstPayment.length > 0) {
                    var perId = filerPeriod[0].id;
                    var firstPid = filterFirstPayment[0].id;
                    var filterResult = this.selectedPlan.percentPerYear.filter(function (s) {
                        return s.firstPid == firstPid && s.perId == perId;
                    });
                    this.selectedPlan.selectedYearlyPercent = filterResult.length > 0 ? filterResult[0].value : 0;
                    return this.selectedPlan.selectedYearlyPercent;
                }

                return 0;
            },
            getSchemeForPeriod: function getSchemeForPeriod(pId) {
                if (!this.selectedSchema.main.percentPerYear) return {};
                if (!this.cachedSchemePeriods[pId]) {
                    var main = this.selectedSchema.main.percentPerYear.filter(function (p) {
                        return p.perId == pId;
                    });
                    var second = this.selectedSchema.second.percentPerYear.filter(function (p) {
                        return p.perId == pId;
                    });
                    this.cachedSchemePeriods[pId] = {
                        main: main,
                        second: second
                    };
                }
                return this.cachedSchemePeriods[pId];
            },
            getAvaliablePlans: function getAvaliablePlans() {
                return [this.selectedSchema.main, this.selectedSchema.second];
            },
            setBankSchema: function setBankSchema(id) {
                var filter = this.bankSchemas.filter(function (b) {
                    return b.bId == id;
                });
                if (filter.length > 0) {
                    var main = filter[0].isDependent ? filter[1] || {} : filter[0];
                    var second = !filter[0].isDependent ? filter[1] || {} : filter[0];
                    return {
                        main: main,
                        second: second
                    };
                }
            },
            resetSelectedCreditPlan: function resetSelectedCreditPlan() {
                eventHandler.emit("applySelectedCreditPlan", {
                    initialFee: {},
                    creditTerm: {}
                });
                /*incomeGridApp.applySelectedCreditPlan({
                    initialFee: {},
                    creditTerm: {},
                });*/
                this.selectedSchema = {
                    main: {},
                    second: {}
                };
                this.selectedPlan = {};
                this.selectedBank = {};
                dataProvider.increasePrice(0);
                this.isPopupActive = false;
            },
            applySelectedCreditPlan: function applySelectedCreditPlan() {
                if (this.isApplyDisabled) return;
                document.getElementById('income-grid-initial-data').scrollIntoView();
                eventHandler.emit("applySelectedCreditPlan", this.selectedPlan);
                //incomeGridApp.applySelectedCreditPlan(this.selectedPlan);
                dataProvider.increasePrice(this.selectedPlan.increaseInTotalValue);
                this.isPopupActive = false;
            },
            openPopup: function openPopup() {
                this.isPopupActive = !this.isPopupActive;
            },
            selectBank: function selectBank(bank) {
                this.selectedSchema = this.setBankSchema(bank.id);
            },
            setDependency: function setDependency(data) {},
            validateFee: function validateFee(value) {
                var _this2 = this;

                this.initialFee.current = parseInt(this.initialFee.current, 10);
                if (value.keyCode == 8) return;
                dataProvider.getAllData(function (data) {
                    if (Number.isNaN(_this2.initialFee.current)) _this2.initialFee.current = _this2.initialFee.default;else if (_this2.initialFee.current > _this2.initialFee.max) _this2.initialFee.current = _this2.initialFee.max;else if (_this2.initialFee.current < 0) _this2.initialFee.current = _this2.initialFee.min;
                });
            },
            validateFeeOnChange: function validateFeeOnChange(value) {
                var _this3 = this;

                this.initialFee.current = parseInt(this.initialFee.current, 10);
                dataProvider.getAllData(function (data) {
                    if (Number.isNaN(_this3.initialFee.current)) _this3.initialFee.current = _this3.initialFee.default;else if (_this3.initialFee.current > _this3.initialFee.max) _this3.initialFee.current = _this3.initialFee.max;else if (_this3.initialFee.current < _this3.initialFee.min) _this3.initialFee.current = _this3.initialFee.min;
                });
            },
            validateTerm: function validateTerm(value) {
                var _this4 = this;

                this.creditTerm.current = parseInt(this.creditTerm.current, 10);
                if (value.keyCode == 8) return;
                dataProvider.getAllData(function (data) {
                    if (Number.isNaN(_this4.creditTerm.current)) _this4.creditTerm.current = _this4.creditTerm.default;else if (_this4.creditTerm.current > _this4.creditTerm.max) _this4.creditTerm.current = _this4.creditTerm.max;else if (_this4.creditTerm.current < 0) _this4.creditTerm.current = _this4.creditTerm.min;
                });
            },
            validateTermOnChange: function validateTermOnChange(value) {
                var _this5 = this;

                this.creditTerm.current = parseInt(this.creditTerm.current, 10);
                dataProvider.getAllData(function (data) {
                    if (Number.isNaN(_this5.creditTerm.current)) _this5.creditTerm.current = _this5.creditTerm.default;else if (_this5.creditTerm.current > _this5.creditTerm.max) _this5.creditTerm.current = _this5.creditTerm.max;else if (_this5.creditTerm.current < _this5.creditTerm.min) _this5.creditTerm.current = _this5.creditTerm.min;
                });
            }
        },
        mounted: function mounted() {
            var _this6 = this;

            dataProvider.getAllData(function (allData) {
                _this6.avaliableBanks = allData.avaliableBanks;
                _this6.bankSchemas = allData.bankSchemas;
                _this6.dollarValue = allData.dollarValue;
                _this6.creditOneTimeCommission = allData.creditOneTimeCommission;
            });
        }
    });
};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var locales = {},
    locale = {};

module.exports.createLocaleMixin = function (dataProvider) {
    return {
        data: {
            langs: [],
            selectedLang: ""
        },
        computed: {
            selectedLangComp: {
                get: function get() {
                    return this.selectedLang;
                },
                set: function set(val) {
                    if (!locales[val]) return;
                    this.selectedLang = val;
                    locale = locales[val];
                }
            }
        },
        methods: {
            getComplectationPopupText: function getComplectationPopupText(key, id, id2, id3, id4) {
                var _this = this;

                if (this.selectedLang == "" || !locales[this.selectedLang].complectationPopup[key]) return;
                var filter = [];
                switch (key) {
                    case "eModules":
                        if (this.selectedEModule.id) {
                            filter = locales[this.selectedLang].complectationPopup[key].filter(function (f) {
                                return f.id == _this.selectedEModule.id;
                            });
                            if (filter.length > 0) {
                                return filter[0][id];
                            }
                        }
                        break;
                    case "eFastening":
                        if (this.selectedEFastening.id) {
                            filter = locales[this.selectedLang].complectationPopup[key].filter(function (f) {
                                return f.id == _this.selectedEFastening.id;
                            });
                            if (filter.length > 0) {
                                return filter[0][id];
                            }
                        }
                        break;
                    case "generalInfo":
                        if (this.selectedPricing.id) {
                            filter = locales[this.selectedLang].complectationPopup[key].filter(function (f) {
                                return f.id == _this.selectedPricing.id;
                            });
                            if (filter.length > 0) {
                                if (id4) return filter[0][id][id2][id3][id4];
                                if (id3) return filter[0][id][id2][id3];
                                if (id2) return filter[0][id][id2];
                                return filter[0][id];
                            }
                        }
                        return locales[this.selectedLang].complectationPopup[key][id];
                        break;
                    case "gridText":
                        return locales[this.selectedLang].complectationPopup[key][id];
                        break;
                }
                return "";
            },
            getBankText: function getBankText(id) {
                var _this2 = this;

                if (this.selectedLang == "" || !locales[this.selectedLang].bankTexts || !this.selectedBank.id) return;
                var filter = locales[this.selectedLang].bankTexts.filter(function (f) {
                    return f.id == _this2.selectedBank.id;
                });
                if (filter.length > 0) {
                    return filter[0][id];
                }
                return;
            },
            getCreditPopupText: function getCreditPopupText(id, id2, id3) {
                if (this.selectedLang == "" || !locales[this.selectedLang].creditPopupText) return;

                if (id3) return locales[this.selectedLang].creditPopupText[id][id2][id3];
                if (id2) return locales[this.selectedLang].creditPopupText[id][id2];else return locales[this.selectedLang].creditPopupText[id];
            },
            getIncomeGridSummaryText: function getIncomeGridSummaryText(id) {
                if (this.selectedLang == "" || !locales[this.selectedLang].incomeGridSummaryText) return;
                return locales[this.selectedLang].incomeGridSummaryText[id];
            },
            getIncomeGridYearlyText: function getIncomeGridYearlyText(id) {
                if (this.selectedLang == "" || !locales[this.selectedLang].incomeGridYearlyText) return;
                return locales[this.selectedLang].incomeGridYearlyText[id];
            },
            getIncomeGridFirstYearText: function getIncomeGridFirstYearText(id) {
                if (this.selectedLang == "" || !locales[this.selectedLang].incomeGridFirstYearText) return;
                return locales[this.selectedLang].incomeGridFirstYearText[id];
            },
            getInitialGridText: function getInitialGridText(id) {
                if (this.selectedLang == "" || !locales[this.selectedLang].initialGridText) return;
                return locales[this.selectedLang].initialGridText[id];
            },
            getComplectationDetaisText: function getComplectationDetaisText() {
                if (this.selectedLang == "" || !locales[this.selectedLang].complectationDetails) return;
                return locales[this.selectedLang].complectationDetails;
            },
            getComplectationPricingText: function getComplectationPricingText(id, fields) {
                if (this.selectedLang == "" || !locales[this.selectedLang].complectationPricing[id - 1]) return;
                return fields ? locales[this.selectedLang].complectationPricing[id - 1].fields : locales[this.selectedLang].complectationPricing[id - 1].name;
            },
            getRegionText: function getRegionText(id) {
                if (!id) id = this.selectedRegion.id;
                if (this.selectedLang == "" || !locales[this.selectedLang].regions[id - 1]) return;
                return locales[this.selectedLang].regions[id - 1].name;
            },
            getMonthText: function getMonthText(id, short) {
                if (this.selectedLang == "" || !locales[this.selectedLang].months[id - 1]) return;
                return short ? locales[this.selectedLang].months[id - 1].shortName : locales[this.selectedLang].months[id - 1].name;
            },
            getLabelText: function getLabelText(id) {
                if (this.selectedLang == "") return;
                return locales[this.selectedLang].labels[id];
            },
            getButtonText: function getButtonText(id) {
                if (this.selectedLang == "") return;
                return locales[this.selectedLang].buttons[id];
            },
            getTitleText: function getTitleText(id) {
                if (this.selectedLang == "") return;
                return locales[this.selectedLang].titles[id];
            },
            getUnitsText: function getUnitsText(id) {
                if (this.selectedLang == "") return;
                return locales[this.selectedLang].units[id];
            },
            formatNumber: function formatNumber(number, round) {
                if (Number.isNaN(number) || number == undefined || number == null) return "";
                if (round) number = Math.round(number);
                var str = number + "";
                str = str.replace('.', ",");
                var pair = [];
                var beyond = str.indexOf(',') == -1;
                var i = 0;
                for (var index = str.length - 1; index >= 0; index--) {
                    if (str[index] == ',') {
                        beyond = true;
                        continue;
                    }
                    if (beyond) i++;
                    if (i % 3 == 0 && index - 1 >= 0 && str[index - 1] != ',' && beyond) {
                        pair.push({
                            index: index,
                            insert: " "
                        });
                    }
                }
                var result = str;
                var length = str.length;
                for (var _index = 0; _index < pair.length; _index++) {
                    result = result.slice(0, pair[_index].index) + " " + result.slice(pair[_index].index, result.length);
                }
                return result;
            }
        },
        mounted: function mounted() {
            var _this3 = this;

            dataProvider.getLocales(function (data) {
                locales = data;
                _this3.langs = Object.keys(locales);
                _this3.selectedLangComp = window._defaultLocale;
                _this3.$forceUpdate();
            });
        }
    };
};

/***/ })
/******/ ]);